{"version":3,"names":["CacheEntry","constructor","source","options","noCache","maxAge","getPath","exists","path","tmpPath","getCacheEntry","downloadPromise","pathResolved","download","result","FileSystem","fetch","status","undefined","mv","CacheManager","config","cacheLimit","pruneCache","defaultConfig","newConfig","get","entries","clearCache","files","ls","baseDir","file","unlink","e","console","log","removeCacheEntry","entry","Error","getCacheSize","stat","size","isImageCached","prefetch","map","image","prefetchBlob","blob","readFile","statDir","sort","a","b","lastModified","currentCacheSize","reduce","cacheSize","overflowSize","length","shift","catch","defaultConfiguration","cacheKey","newCacheKey","getCustomCacheKey","filename","substring","lastIndexOf","indexOf","ext","sha","SHA1","uniqueId","mkdir","ageInHours","Math","floor","Date","now"],"sources":["CacheManager.ts"],"sourcesContent":["// @ts-ignore\nimport SHA1 from 'crypto-js/sha1';\nimport uniqueId from 'lodash/uniqueId';\nimport { FileStat, FileSystem } from 'react-native-file-access';\n\nimport { Config, DownloadOptions } from './types';\nimport defaultConfiguration from './defaultConfiguration';\n\nexport class CacheEntry {\n  source: string;\n\n  options: DownloadOptions | undefined;\n\n  downloadPromise: Promise<string | undefined> | undefined;\n\n  pathResolved = false;\n\n  noCache: boolean | undefined = false;\n\n  maxAge: number | undefined;\n\n  constructor(\n    source: string,\n    options: DownloadOptions | undefined,\n    noCache?: boolean,\n    maxAge?: number\n  ) {\n    this.noCache = noCache;\n    this.options = options;\n    this.source = source;\n    this.maxAge = maxAge;\n  }\n\n  async getPath(): Promise<string | undefined> {\n    const { source, maxAge, noCache } = this;\n    const { exists, path, tmpPath } = await getCacheEntry(source, maxAge);\n\n    if (exists && !noCache) {\n      return path;\n    }\n\n    if (!this.downloadPromise) {\n      this.pathResolved = false;\n      this.downloadPromise = this.download(path, tmpPath);\n    }\n\n    if (this.downloadPromise && this.pathResolved) {\n      this.pathResolved = false;\n      this.downloadPromise = this.download(path, tmpPath);\n    }\n    return this.downloadPromise;\n  }\n\n  private async download(\n    path: string,\n    tmpPath: string\n  ): Promise<string | undefined> {\n    const { source, options, noCache } = this;\n    // if noCache is true then return the source uri without caching it\n    if (noCache) {\n      return source;\n    }\n\n    if (source != null) {\n      const result = await FileSystem.fetch(source, {\n        path: tmpPath,\n        ...options,\n      });\n      // If the image download failed, we don't cache anything\n      if (result && result.status !== 200) {\n        this.downloadPromise = undefined;\n        return undefined;\n      }\n      await FileSystem.mv(tmpPath, path);\n      if (CacheManager.config.cacheLimit) {\n        await CacheManager.pruneCache();\n      }\n      this.pathResolved = true;\n      return path;\n    }\n    return source;\n  }\n}\n\nexport default class CacheManager {\n  static defaultConfig: Config = defaultConfiguration;\n\n  static config: Config;\n\n  get config() {\n    return CacheManager.defaultConfig;\n  }\n\n  set config(newConfig) {\n    CacheManager.defaultConfig = newConfig;\n  }\n\n  static entries: { [uri: string]: CacheEntry } = {};\n\n  static get(\n    source: string,\n    options: DownloadOptions | undefined,\n    noCache?: boolean,\n    maxAge?: number\n  ): CacheEntry {\n    if (!CacheManager.entries[source]) {\n      CacheManager.entries[source] = new CacheEntry(\n        source,\n        options,\n        noCache,\n        maxAge\n      );\n      return CacheManager.entries[source];\n    }\n    return CacheManager.entries[source];\n  }\n\n  static async clearCache(): Promise<void> {\n    const files = await FileSystem.ls(CacheManager.config.baseDir);\n    for (const file of files) {\n      try {\n        await FileSystem.unlink(`${CacheManager.config.baseDir}${file}`);\n      } catch (e) {\n        console.log(`error while clearing images cache, error: ${e}`);\n      }\n    }\n  }\n\n  static async removeCacheEntry(entry: string): Promise<void> {\n    try {\n      const file = await getCacheEntry(entry);\n      const { path } = file;\n      await FileSystem.unlink(path);\n    } catch (e) {\n      throw new Error('error while clearing image from cache');\n    }\n  }\n\n  static async getCacheSize(): Promise<number> {\n    const result = await FileSystem.stat(CacheManager.config.baseDir);\n    if (!result) {\n      throw new Error(`${CacheManager.config.baseDir} not found`);\n    }\n    return result.size;\n  }\n\n  static async isImageCached(entry: string): Promise<boolean> {\n    try {\n      const file = await getCacheEntry(entry);\n      const { exists } = file;\n      return exists;\n    } catch (e) {\n      throw new Error('Error while checking if image already exists on cache');\n    }\n  }\n\n  static prefetch(source: string | string[], options?: DownloadOptions): void {\n    if (typeof source === 'string') {\n      CacheManager.get(source, options).getPath();\n    } else {\n      source.map(image => {\n        CacheManager.get(image, options).getPath();\n      });\n    }\n  }\n\n  static async prefetchBlob(\n    source: string,\n    options?: DownloadOptions\n  ): Promise<string | undefined> {\n    const path = await CacheManager.get(source, options).getPath();\n    if (path) {\n      const blob = await FileSystem.readFile(path, 'base64');\n      return blob;\n    }\n    return undefined;\n  }\n\n  static async pruneCache() {\n    // If cache directory does not exist yet there's no need for pruning.\n    if (!(await CacheManager.getCacheSize())) {\n      return;\n    }\n\n    const files = await FileSystem.statDir(CacheManager.config.baseDir);\n\n    files.sort((a: FileStat, b: FileStat) => {\n      return a.lastModified - b.lastModified;\n    });\n\n    const currentCacheSize = files.reduce((cacheSize, file: FileStat) => {\n      return cacheSize + file.size;\n    }, 0);\n\n    if (currentCacheSize > CacheManager.config.cacheLimit) {\n      let overflowSize = currentCacheSize - CacheManager.config.cacheLimit;\n\n      while (overflowSize > 0 && files.length) {\n        const file = files.shift();\n        if (file) {\n          if (await FileSystem.exists(file.path)) {\n            overflowSize = overflowSize - file.size;\n            await FileSystem.unlink(file.path).catch(e => console.log(e));\n          }\n        }\n      }\n    }\n  }\n}\n\nconst getCacheEntry = async (\n  cacheKey: string,\n  maxAge?: number | undefined\n): Promise<{ exists: boolean; path: string; tmpPath: string }> => {\n  let newCacheKey = cacheKey;\n  if (CacheManager.config.getCustomCacheKey) {\n    newCacheKey = CacheManager.config.getCustomCacheKey(cacheKey);\n  }\n  const filename = cacheKey.substring(\n    cacheKey.lastIndexOf('/'),\n    cacheKey.indexOf('?') === -1 ? cacheKey.length : cacheKey.indexOf('?')\n  );\n  const ext =\n    filename.indexOf('.') === -1\n      ? '.jpg'\n      : filename.substring(filename.lastIndexOf('.'));\n  const sha = SHA1(newCacheKey);\n  const path = `${CacheManager.config.baseDir}${sha}${ext}`;\n  const tmpPath = `${CacheManager.config.baseDir}${sha}-${uniqueId()}${ext}`;\n  // TODO: maybe we don't have to do this every time\n  try {\n    await FileSystem.mkdir(CacheManager.config.baseDir);\n  } catch (e) {\n    // do nothing\n  }\n  const exists = await FileSystem.exists(path);\n\n  if (maxAge && exists) {\n    const { lastModified } = await FileSystem.stat(path);\n    const ageInHours = Math.floor(Date.now() - lastModified) / 1000 / 3600;\n    if (maxAge < ageInHours) {\n      await FileSystem.unlink(path);\n      return { exists: false, path, tmpPath };\n    }\n  }\n  return { exists, path, tmpPath };\n};\n"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAGA;;;;;;AAEO,MAAMA,UAAN,CAAiB;EAatBC,WAAW,CACTC,MADS,EAETC,OAFS,EAGTC,OAHS,EAITC,MAJS,EAKT;IAAA;;IAAA;;IAAA;;IAAA,sCAXa,KAWb;;IAAA,iCAT6B,KAS7B;;IAAA;;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKG,MAAL,GAAcA,MAAd;EACD;;EAEY,MAAPC,OAAO,GAAgC;IAC3C,MAAM;MAAEJ,MAAF;MAAUG,MAAV;MAAkBD;IAAlB,IAA8B,IAApC;IACA,MAAM;MAAEG,MAAF;MAAUC,IAAV;MAAgBC;IAAhB,IAA4B,MAAMC,aAAa,CAACR,MAAD,EAASG,MAAT,CAArD;;IAEA,IAAIE,MAAM,IAAI,CAACH,OAAf,EAAwB;MACtB,OAAOI,IAAP;IACD;;IAED,IAAI,CAAC,KAAKG,eAAV,EAA2B;MACzB,KAAKC,YAAL,GAAoB,KAApB;MACA,KAAKD,eAAL,GAAuB,KAAKE,QAAL,CAAcL,IAAd,EAAoBC,OAApB,CAAvB;IACD;;IAED,IAAI,KAAKE,eAAL,IAAwB,KAAKC,YAAjC,EAA+C;MAC7C,KAAKA,YAAL,GAAoB,KAApB;MACA,KAAKD,eAAL,GAAuB,KAAKE,QAAL,CAAcL,IAAd,EAAoBC,OAApB,CAAvB;IACD;;IACD,OAAO,KAAKE,eAAZ;EACD;;EAEqB,MAARE,QAAQ,CACpBL,IADoB,EAEpBC,OAFoB,EAGS;IAC7B,MAAM;MAAEP,MAAF;MAAUC,OAAV;MAAmBC;IAAnB,IAA+B,IAArC,CAD6B,CAE7B;;IACA,IAAIA,OAAJ,EAAa;MACX,OAAOF,MAAP;IACD;;IAED,IAAIA,MAAM,IAAI,IAAd,EAAoB;MAClB,MAAMY,MAAM,GAAG,MAAMC,iCAAA,CAAWC,KAAX,CAAiBd,MAAjB,EAAyB;QAC5CM,IAAI,EAAEC,OADsC;QAE5C,GAAGN;MAFyC,CAAzB,CAArB,CADkB,CAKlB;;MACA,IAAIW,MAAM,IAAIA,MAAM,CAACG,MAAP,KAAkB,GAAhC,EAAqC;QACnC,KAAKN,eAAL,GAAuBO,SAAvB;QACA,OAAOA,SAAP;MACD;;MACD,MAAMH,iCAAA,CAAWI,EAAX,CAAcV,OAAd,EAAuBD,IAAvB,CAAN;;MACA,IAAIY,YAAY,CAACC,MAAb,CAAoBC,UAAxB,EAAoC;QAClC,MAAMF,YAAY,CAACG,UAAb,EAAN;MACD;;MACD,KAAKX,YAAL,GAAoB,IAApB;MACA,OAAOJ,IAAP;IACD;;IACD,OAAON,MAAP;EACD;;AAzEqB;;;;AA4ET,MAAMkB,YAAN,CAAmB;EAKtB,IAANC,MAAM,GAAG;IACX,OAAOD,YAAY,CAACI,aAApB;EACD;;EAES,IAANH,MAAM,CAACI,SAAD,EAAY;IACpBL,YAAY,CAACI,aAAb,GAA6BC,SAA7B;EACD;;EAIS,OAAHC,GAAG,CACRxB,MADQ,EAERC,OAFQ,EAGRC,OAHQ,EAIRC,MAJQ,EAKI;IACZ,IAAI,CAACe,YAAY,CAACO,OAAb,CAAqBzB,MAArB,CAAL,EAAmC;MACjCkB,YAAY,CAACO,OAAb,CAAqBzB,MAArB,IAA+B,IAAIF,UAAJ,CAC7BE,MAD6B,EAE7BC,OAF6B,EAG7BC,OAH6B,EAI7BC,MAJ6B,CAA/B;MAMA,OAAOe,YAAY,CAACO,OAAb,CAAqBzB,MAArB,CAAP;IACD;;IACD,OAAOkB,YAAY,CAACO,OAAb,CAAqBzB,MAArB,CAAP;EACD;;EAEsB,aAAV0B,UAAU,GAAkB;IACvC,MAAMC,KAAK,GAAG,MAAMd,iCAAA,CAAWe,EAAX,CAAcV,YAAY,CAACC,MAAb,CAAoBU,OAAlC,CAApB;;IACA,KAAK,MAAMC,IAAX,IAAmBH,KAAnB,EAA0B;MACxB,IAAI;QACF,MAAMd,iCAAA,CAAWkB,MAAX,CAAmB,GAAEb,YAAY,CAACC,MAAb,CAAoBU,OAAQ,GAAEC,IAAK,EAAxD,CAAN;MACD,CAFD,CAEE,OAAOE,CAAP,EAAU;QACVC,OAAO,CAACC,GAAR,CAAa,6CAA4CF,CAAE,EAA3D;MACD;IACF;EACF;;EAE4B,aAAhBG,gBAAgB,CAACC,KAAD,EAA+B;IAC1D,IAAI;MACF,MAAMN,IAAI,GAAG,MAAMtB,aAAa,CAAC4B,KAAD,CAAhC;MACA,MAAM;QAAE9B;MAAF,IAAWwB,IAAjB;MACA,MAAMjB,iCAAA,CAAWkB,MAAX,CAAkBzB,IAAlB,CAAN;IACD,CAJD,CAIE,OAAO0B,CAAP,EAAU;MACV,MAAM,IAAIK,KAAJ,CAAU,uCAAV,CAAN;IACD;EACF;;EAEwB,aAAZC,YAAY,GAAoB;IAC3C,MAAM1B,MAAM,GAAG,MAAMC,iCAAA,CAAW0B,IAAX,CAAgBrB,YAAY,CAACC,MAAb,CAAoBU,OAApC,CAArB;;IACA,IAAI,CAACjB,MAAL,EAAa;MACX,MAAM,IAAIyB,KAAJ,CAAW,GAAEnB,YAAY,CAACC,MAAb,CAAoBU,OAAQ,YAAzC,CAAN;IACD;;IACD,OAAOjB,MAAM,CAAC4B,IAAd;EACD;;EAEyB,aAAbC,aAAa,CAACL,KAAD,EAAkC;IAC1D,IAAI;MACF,MAAMN,IAAI,GAAG,MAAMtB,aAAa,CAAC4B,KAAD,CAAhC;MACA,MAAM;QAAE/B;MAAF,IAAayB,IAAnB;MACA,OAAOzB,MAAP;IACD,CAJD,CAIE,OAAO2B,CAAP,EAAU;MACV,MAAM,IAAIK,KAAJ,CAAU,uDAAV,CAAN;IACD;EACF;;EAEc,OAARK,QAAQ,CAAC1C,MAAD,EAA4BC,OAA5B,EAA6D;IAC1E,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;MAC9BkB,YAAY,CAACM,GAAb,CAAiBxB,MAAjB,EAAyBC,OAAzB,EAAkCG,OAAlC;IACD,CAFD,MAEO;MACLJ,MAAM,CAAC2C,GAAP,CAAWC,KAAK,IAAI;QAClB1B,YAAY,CAACM,GAAb,CAAiBoB,KAAjB,EAAwB3C,OAAxB,EAAiCG,OAAjC;MACD,CAFD;IAGD;EACF;;EAEwB,aAAZyC,YAAY,CACvB7C,MADuB,EAEvBC,OAFuB,EAGM;IAC7B,MAAMK,IAAI,GAAG,MAAMY,YAAY,CAACM,GAAb,CAAiBxB,MAAjB,EAAyBC,OAAzB,EAAkCG,OAAlC,EAAnB;;IACA,IAAIE,IAAJ,EAAU;MACR,MAAMwC,IAAI,GAAG,MAAMjC,iCAAA,CAAWkC,QAAX,CAAoBzC,IAApB,EAA0B,QAA1B,CAAnB;MACA,OAAOwC,IAAP;IACD;;IACD,OAAO9B,SAAP;EACD;;EAEsB,aAAVK,UAAU,GAAG;IACxB;IACA,IAAI,EAAE,MAAMH,YAAY,CAACoB,YAAb,EAAR,CAAJ,EAA0C;MACxC;IACD;;IAED,MAAMX,KAAK,GAAG,MAAMd,iCAAA,CAAWmC,OAAX,CAAmB9B,YAAY,CAACC,MAAb,CAAoBU,OAAvC,CAApB;IAEAF,KAAK,CAACsB,IAAN,CAAW,CAACC,CAAD,EAAcC,CAAd,KAA8B;MACvC,OAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA1B;IACD,CAFD;IAIA,MAAMC,gBAAgB,GAAG1B,KAAK,CAAC2B,MAAN,CAAa,CAACC,SAAD,EAAYzB,IAAZ,KAA+B;MACnE,OAAOyB,SAAS,GAAGzB,IAAI,CAACU,IAAxB;IACD,CAFwB,EAEtB,CAFsB,CAAzB;;IAIA,IAAIa,gBAAgB,GAAGnC,YAAY,CAACC,MAAb,CAAoBC,UAA3C,EAAuD;MACrD,IAAIoC,YAAY,GAAGH,gBAAgB,GAAGnC,YAAY,CAACC,MAAb,CAAoBC,UAA1D;;MAEA,OAAOoC,YAAY,GAAG,CAAf,IAAoB7B,KAAK,CAAC8B,MAAjC,EAAyC;QACvC,MAAM3B,IAAI,GAAGH,KAAK,CAAC+B,KAAN,EAAb;;QACA,IAAI5B,IAAJ,EAAU;UACR,IAAI,MAAMjB,iCAAA,CAAWR,MAAX,CAAkByB,IAAI,CAACxB,IAAvB,CAAV,EAAwC;YACtCkD,YAAY,GAAGA,YAAY,GAAG1B,IAAI,CAACU,IAAnC;YACA,MAAM3B,iCAAA,CAAWkB,MAAX,CAAkBD,IAAI,CAACxB,IAAvB,EAA6BqD,KAA7B,CAAmC3B,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAxC,CAAN;UACD;QACF;MACF;IACF;EACF;;AA3H+B;;;;gBAAbd,Y,mBACY0C,6B;;gBADZ1C,Y;;gBAAAA,Y,aAa6B,E;;AAiHlD,MAAMV,aAAa,GAAG,OACpBqD,QADoB,EAEpB1D,MAFoB,KAG4C;EAChE,IAAI2D,WAAW,GAAGD,QAAlB;;EACA,IAAI3C,YAAY,CAACC,MAAb,CAAoB4C,iBAAxB,EAA2C;IACzCD,WAAW,GAAG5C,YAAY,CAACC,MAAb,CAAoB4C,iBAApB,CAAsCF,QAAtC,CAAd;EACD;;EACD,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,SAAT,CACfJ,QAAQ,CAACK,WAAT,CAAqB,GAArB,CADe,EAEfL,QAAQ,CAACM,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA3B,GAA+BN,QAAQ,CAACJ,MAAxC,GAAiDI,QAAQ,CAACM,OAAT,CAAiB,GAAjB,CAFlC,CAAjB;EAIA,MAAMC,GAAG,GACPJ,QAAQ,CAACG,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAA3B,GACI,MADJ,GAEIH,QAAQ,CAACC,SAAT,CAAmBD,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAnB,CAHN;EAIA,MAAMG,GAAG,GAAG,IAAAC,YAAA,EAAKR,WAAL,CAAZ;EACA,MAAMxD,IAAI,GAAI,GAAEY,YAAY,CAACC,MAAb,CAAoBU,OAAQ,GAAEwC,GAAI,GAAED,GAAI,EAAxD;EACA,MAAM7D,OAAO,GAAI,GAAEW,YAAY,CAACC,MAAb,CAAoBU,OAAQ,GAAEwC,GAAI,IAAG,IAAAE,iBAAA,GAAW,GAAEH,GAAI,EAAzE,CAfgE,CAgBhE;;EACA,IAAI;IACF,MAAMvD,iCAAA,CAAW2D,KAAX,CAAiBtD,YAAY,CAACC,MAAb,CAAoBU,OAArC,CAAN;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU,CACV;EACD;;EACD,MAAM3B,MAAM,GAAG,MAAMQ,iCAAA,CAAWR,MAAX,CAAkBC,IAAlB,CAArB;;EAEA,IAAIH,MAAM,IAAIE,MAAd,EAAsB;IACpB,MAAM;MAAE+C;IAAF,IAAmB,MAAMvC,iCAAA,CAAW0B,IAAX,CAAgBjC,IAAhB,CAA/B;IACA,MAAMmE,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAazB,YAAxB,IAAwC,IAAxC,GAA+C,IAAlE;;IACA,IAAIjD,MAAM,GAAGsE,UAAb,EAAyB;MACvB,MAAM5D,iCAAA,CAAWkB,MAAX,CAAkBzB,IAAlB,CAAN;MACA,OAAO;QAAED,MAAM,EAAE,KAAV;QAAiBC,IAAjB;QAAuBC;MAAvB,CAAP;IACD;EACF;;EACD,OAAO;IAAEF,MAAF;IAAUC,IAAV;IAAgBC;EAAhB,CAAP;AACD,CApCD"}